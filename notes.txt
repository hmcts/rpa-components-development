Tasks
=====



MVP
---

1. Create an angular app with 2 components in it:  Person List and Person Detail.  When clicking a link on Person List, this emits an event which Person Detail is subscribed to.  Person Detail then displays the details for that person.

2. Extract out Person Detail to a component library (i.e. physically a different project).  The original app will now include that component as an import and no item of Person Detail code will reside in the app project.

3. Extract the Person List component too and put it into the same component library.  The original app will now include both components and have no knowledge of "person" components or functionality within it, and will just have the code to connect the two components together.



Extension
---------

4. Add redux to enable application state management and allow history of clicks (i.e. to support page back after a person was selected in the Person List component and the Person Detail component then rendered the details - clicking page back should show us a "page" where the Person Details is empty (i.e. deselected)).



Steps
=====

Step:  Create an Angular app:

ng new myapp
cd myapp
ng serve -o

You now have an app in the browser.



Step:  Create 2 components:

ng g component PersonList
ng g component PersonDetail

Place them together on the main app page:

---app.component.html---
The App

<app-person-list></app-person-list>

<app-person-detail></app-person-detail>
------



Step:  Facilitate lossely coupled communication between components

After reading up on this, it seems we need some kind of eventing service to keep things decoupled (well, where they only share a common service to communicate through rxjs):

ng g service Eventing

